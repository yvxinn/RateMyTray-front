---
alwaysApply: true
---

# “小众点评” (RateMyTray) 前端项目设计与实现说明书

本文档旨在详细阐述“小众点评”项目前端的整体设计、技术实现、代码质量保障以及部署运维等方面的细节，旨在为项目答辩、后续维护和二次开发提供一份全面的参考。

---

## 1. 项目简介

### 1.1 项目背景与目标

本项目是一个针对校园环境的餐饮点评平台，旨在为学生和教职工提供一个发现、评价和分享校园内各个食堂窗口及菜品的渠道。项目致力于解决校园餐饮信息不对称、评价渠道缺失的问题，通过用户生成内容（UGC）的模式，构建一个真实、活跃的校园美食交流社区。

**核心目标：**

- **服务学生/教职工**：提供便捷的窗口/菜品信息查询、真实用户评价浏览、收藏喜爱菜品等功能。
- **服务商家**：提供菜品管理、接收用户反馈、回复用户评论、查看经营数据统计等功能。
- **服务食堂管理员**：提供内容审核（菜品、评论）、处理用户举报、发布全校公告等管理功能。

### 1.2 核心功能模块

项目围绕三大核心用户角色（普通用户、商家、管理员）构建功能矩阵：

- **通用模块**：用户注册、登录、个人信息管理。
- **信息浏览模块**：窗口列表/详情、菜品列表/详情查询。
- **用户交互模块**：发表/点赞评论、收藏/取消收藏菜品或窗口、提交举报。
- **商家功能模块**：菜品上架/修改（需审核）、回复评论。
- **管理员后台模块**：内容审核（菜品）、举报处理、发布公告、查看统计数据。
- **文件服务模块**：支持用户头像、评论图片、菜品和窗口封面的上传与访问。

好的，非常乐意为您整理一份项目的开发文档和开发规范。这份文档将基于我们刚刚完成的代码审查和重构工作，旨在帮助团队成员快速理解项目、统一编码风格，并保持代码库的整洁和可维护性。

---

## “小众点评”前端项目开发文档

本文档旨在阐述“小众点评”前端项目的技术架构、核心模块和关键概念，为新成员上手和项目长期维护提供指导。

### 1. 技术栈

- **核心框架**: [Vue 3](https://vuejs.org/)
- **开发平台**: [uni-app](https://uniapp.dcloud.io/)，用于跨平台开发（小程序、App 等）。
- **UI 框架**: [uni-ui](https://uniapp.dcloud.io/component/uniui/uni-ui.html)，官方提供的基础组件库。
- **状态管理**: [Vuex](https://vuex.vuejs.org/)，用于管理全局用户状态和 Token。

### 2. 项目结构

项目遵循按功能和职责分离的原则进行组织：

```
/
├── components/       # 全局可复用组件
├── pages/            # 业务页面
├── services/         # API 服务层
│   └── api.js        # 全局唯一的 API 请求定义文件
├── static/           # 静态资源 (图片等)
├── store/            # Vuex 状态管理
│   └── index.js
├── utils/            # 通用工具模块
│   ├── apiCode.js    # 后端业务状态码常量
│   ├── config.js     # 环境相关配置
│   ├── request.js    # Axios 封装的请求拦截器
│   ├── router.js     # 路由管理
│   └── useResolveImagePath.js # Composable 函数示例
└── ...               # 其他 uni-app 配置文件
```

### 3. 核心模块详解

#### 3.1. API 服务 (`services/` 和 `utils/request.js`)

- **统一 API 定义**: 所有与后端交互的 API 请求都必须在 `services/api.js` 文件中统一定义。每个函数都应有清晰的 JSDoc 注释，说明其功能、参数和返回值。
- **请求封装**: `utils/request.js` 是对 `uni.request` 的统一封装。它负责：
  - 自动从 `utils/config.js` 读取并拼接基础 URL (`BASE_URL`)。
  - 在请求头中自动注入 `token`。
  - 对响应进行初步拦截，处理 HTTP 状态码和后端业务状态码，并弹出统一的错误提示。
- **状态码管理**: `utils/apiCode.js` 文件中定义了所有后端返回的业务状态码常量。在 `request.js` 中使用这些常量来判断业务成功或失败，避免在代码中出现“魔法数字”。

#### 3.2. 路由管理 (`utils/router.js`)

- **路径枚举**: `RoutePath` 对象是所有页面路径的枚举集合。**所有页面跳转都必须使用此枚举**，禁止在业务代码中使用硬编码的 URL 字符串。
- **导航函数**: 提供了 `navigateTo` 和 `reLaunch` 两个封装函数，供全项目统一调用，简化了跳转逻辑。

#### 3.3. 环境配置 (`utils/config.js`)

- 该文件基于 `import.meta.env.MODE` 来区分**开发环境**和**生产环境**。
- `BASE_URL`: API 请求的基地址。在开发环境下为 `/api`（用于 HBuilderX 代理），在生产环境下应配置为真实的后端服务域名。
- `BACKEND_URL`: 用于拼接静态资源（如图片）的完整 URL。

#### 3.4. 状态管理 (`store/`)

- 项目使用 Vuex 进行全局状态管理。
- **核心状态**:
  - `user`: 存储当前登录用户的完整信息（ID, username, role, avatarUrl 等）。
  - `token`: 存储用于 API 请求认证的 `token`。
- **操作**: 通过 `store.commit` 来同步修改状态，通过 `store.dispatch` 来执行异步操作（如登录、登出）。

#### 3.5. 可复用逻辑 (`Composable` 函数)

- 我们鼓励将跨组件的可复用逻辑抽离成 `Composable` 函数（遵循 `use` 前缀命名），并存放在 `utils/` 目录下。
- **示例**: `utils/useResolveImagePath.js` 是一个 `composable`，它封装了处理图片路径（拼接域名、处理默认图片）的逻辑，已在多个组件中复用。

---

## “小众点评”前端开发规范

为确保代码质量和团队协作效率，所有开发者应遵循以下规范。

### 1. 通用原则

1.  **一致性优先**: 始终遵循项目中已有的代码风格和设计模式。
2.  **DRY (Don't Repeat Yourself)**: 避免重复代码。将通用 UI 抽离为组件，将通用逻辑抽离为 `composable` 函数。
3.  **代码清晰**: 编写易于理解和维护的代码。对复杂逻辑添加必要的注释。

### 2. Vue.js 规范

1.  **`<script setup>`**: **所有新的 Vue 组件都必须使用 `<script setup>` 语法**，以保持与项目统一的组合式 API 风格。
2.  **响应式 API**:
    - 对基本类型（String, Number, Boolean）使用 `ref()`。
    - 对对象或数组使用 `reactive()` 或 `ref()`。
3.  **组件命名**: 组件文件名和引入时的名称都应使用**大驼峰命名法 (PascalCase)**，例如 `DishCard.vue`。
4.  **Props 定义**: 组件的 `props` 必须有明确的 `type` 定义，并尽可能提供 `required` 或 `default`。
5.  **生命周期**: 使用组合式 API 的生命周期钩子，如 `onMounted`, `onLoad`, `onShow`。

### 3. API & 数据流规范

1.  **API 集中管理**: 所有 API 请求函数必须在 `services/api.js` 中定义。
2.  **异步处理**: 所有 API 调用都应使用 `async/await`，并用 `try...catch...finally` 块进行完整的错误处理和加载状态管理。
3.  **数据传递**:
    - 页面间传递简单数据（如 ID）时，通过查询参数传递。
    - **禁止通过 URL 查询参数传递复杂的对象**。应在目标页面根据 ID 重新调用 API 获取完整数据。

### 4. 路由规范

1.  **禁止硬编码**: 严禁在代码中使用硬编码的页面路径（如 `"/pages/index/index"`）。
2.  **统一调用**: 必须使用 `utils/router.js` 中提供的 `RoutePath` 枚举和 `navigateTo`/`reLaunch` 辅助函数进行所有页面跳转。

### 5. 代码风格

1.  **移除调试代码**: 在提交代码前，**必须移除所有 `console.log` 语句**。
2.  **JSDoc 注释**: 对所有 `export` 的函数（尤其是在 `services/api.js` 和 `utils/` 中），都应添加 JSDoc 注释，说明其功能、`@param` 和 `@returns`。
3.  **格式化**: 遵循项目配置的格式化工具（如 Prettier）的规则。

---
